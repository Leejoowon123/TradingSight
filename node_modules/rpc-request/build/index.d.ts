import { RequestInit, Response } from "node-fetch";
export declare type ITransformType =
  | "buffer"
  | "arrayBuffer"
  | "blob"
  | "json"
  | "text"
  | "raw";
export interface FetchClientOptions {
  baseUrl?: string | URL;
  transform?: ITransformType;
  rejectNotOk?: boolean;
}
export interface IClientOptions extends FetchClientOptions {
  transform: ITransformType;
  rejectNotOk: boolean;
}
export declare const DefaultTransform = "raw";
export declare class UnsuccessfulFetch extends Error {
  #private;
  constructor(message: string, response: Response);
  get response(): Response;
}
export declare class FetchClient<T = Response> {
  #private;
  constructor(
    fetchOptions?: RequestInit,
    { rejectNotOk, transform, baseUrl }?: FetchClientOptions
  );
  get fetchOptions(): RequestInit;
  set fetchOptions(options: RequestInit);
  get(path?: string, _fetchOptions?: RequestInit): Promise<T>;
  head(path?: string, _fetchOptions?: RequestInit): Promise<T>;
  post(path?: string, _fetchOptions?: RequestInit): Promise<T>;
  put(path?: string, _fetchOptions?: RequestInit): Promise<T>;
  delete(path?: string, _fetchOptions?: RequestInit): Promise<T>;
  options(path?: string, _fetchOptions?: RequestInit): Promise<T>;
  trace(path?: string, _fetchOptions?: RequestInit): Promise<T>;
  patch(path?: string, _fetchOptions?: RequestInit): Promise<T>;
  fetch(path?: string, options?: RequestInit): Promise<T>;
}
export default FetchClient;
