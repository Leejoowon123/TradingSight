import { FetchClient } from "rpc-request";
export declare const ApiLimit = 500;
export declare const DefaultSymbol = "btcusd";
export declare const DefaultCurrency = "usd";
export declare const ApiUri = "https://api.gemini.com";
export declare const SandboxApiUri = "https://api.sandbox.gemini.com";
export declare const Headers: {
  "User-Agent": string;
  "Content-Type": string;
  Accept: string;
  "Content-Length": string;
  "Cache-Control": string;
};
export interface SymbolFilter {
  symbol?: string;
}
export interface TickerFilter extends SymbolFilter {
  v?: "v1" | "v2";
}
export interface CandlesFilter extends SymbolFilter {
  time_frame?: "1m" | "5m" | "15m" | "30m" | "1hr" | "6hr" | "1day";
}
export interface BookFilter extends SymbolFilter {
  limit_bids?: number;
  limit_asks?: number;
}
export interface TradeHistoryFilter extends SymbolFilter {
  timestamp?: number;
  limit_trades?: number;
  include_breaks?: boolean;
}
export interface AuctionHistoryFilter extends SymbolFilter {
  timestamp?: number;
  limit_auction_results?: number;
  include_indicative?: boolean;
}
export interface ISymbol {
  symbol: string;
  base_currency: string;
  quote_currency: string;
  tick_size: number;
  quote_increment: number;
  min_order_size: string;
  status: "open" | "closed" | "cancel_only" | "post_only" | "limit_only";
}
export interface TickerV1 {
  bid: string;
  ask: string;
  last: string;
  volume: {
    [key: string]: string | number;
  };
}
export interface TickerV2 {
  symbol: string;
  open: string;
  high: string;
  low: string;
  close: string;
  changes: string[];
  bid: string;
  ask: string;
}
export declare type Ticker = TickerV1 | TickerV2;
export declare type Candle = [number, number, number, number, number, number];
export interface BookEntry {
  price: string;
  amount: string;
  timestamp: string;
}
export interface OrderBook {
  bids: BookEntry[];
  asks: BookEntry[];
}
export interface Trade {
  timestamp: number;
  timestampms: number;
  tid: number;
  price: string;
  amount: string;
  exchange: "gemini";
  type: "buy" | "sell" | "auction" | "block";
  broken?: boolean;
}
export interface AuctionInfo {
  closed_until_ms?: number;
  last_auction_eid?: number;
  last_auction_price?: string;
  last_auction_quantity?: string;
  last_highest_bid_price?: string;
  last_lowest_ask_price?: string;
  last_collar_price?: string;
  most_recent_indicative_price?: string;
  most_recent_indicative_quantity?: string;
  most_recent_highest_bid_price?: string;
  most_recent_lowest_ask_price?: string;
  most_recent_collar_price?: string;
  next_update_ms?: number;
  next_auction_ms?: number;
}
export interface AuctionHistory {
  timestamp: number;
  timestampms: number;
  auction_id: number;
  eid: number;
  event_type: "indicative" | "auction";
  auction_result: "success" | "failure";
  auction_price?: string;
  auction_quantity?: string;
  highest_bid_price?: string;
  lowest_ask_price?: string;
  collar_price?: string;
  unmatched_collar_quantity?: string;
}
export interface PriceFeedItem {
  pair: string;
  price: string;
  percentChange24h: string;
}
export interface PublicClientOptions {
  symbol?: string;
  sandbox?: boolean;
  apiUri?: string;
}
export declare class PublicClient extends FetchClient<unknown> {
  #private;
  readonly symbol: string;
  readonly apiUri: string;
  constructor({ symbol, sandbox, apiUri }?: PublicClientOptions);
  get<T = unknown>(path: string): Promise<T>;
  /** Get all available symbols for trading. */
  getSymbols(): Promise<string[]>;
  /** Get extra details about the symbol. */
  getSymbol({ symbol }: { symbol: string }): Promise<ISymbol>;
  /** Get information about recent trading activity for the symbol. */
  getTicker(options: { symbol?: string; v: "v2" }): Promise<TickerV2>;
  getTicker(options?: { symbol?: string; v?: "v1" }): Promise<TickerV1>;
  /** Get time-intervaled data for the provided symbol. */
  getCandles({ symbol, time_frame }?: CandlesFilter): Promise<Candle[]>;
  /** Get the current order book. */
  getOrderBook({ symbol, ...qs }?: BookFilter): Promise<OrderBook>;
  /** Get the trades that have executed since the specified timestamp. */
  getTradeHistory({
    symbol,
    limit_trades,
    ...qs
  }?: TradeHistoryFilter): Promise<Trade[]>;
  /** Get current auction information. */
  getCurrentAuction({ symbol }?: SymbolFilter): Promise<AuctionInfo>;
  /** Get the auction events. */
  getAuctionHistory({
    symbol,
    limit_auction_results,
    ...qs
  }?: AuctionHistoryFilter): Promise<AuctionHistory[]>;
  /** Get the price feed. */
  getPriceFeed(): Promise<PriceFeedItem[]>;
}
