import { UnsuccessfulFetch } from "rpc-request";
import { DefaultCurrency, PublicClient, ApiLimit } from "./public.js";
import { SignRequest } from "./signer.js";
export class AuthenticatedClient extends PublicClient {
  #key;
  #secret;
  #nonce;
  constructor({ key, secret, ...rest }) {
    super(rest);
    this.#key = key;
    this.#secret = secret;
    this.#nonce = () => Date.now();
  }
  post(path, _options, body = { request: "/" }) {
    body.nonce = this.nonce();
    const payload = Buffer.from(JSON.stringify(body)).toString("base64");
    const request = { key: this.#key, secret: this.#secret, payload };
    const headers = { ...SignRequest(request) };
    return new Promise((resolve, reject) => {
      super
        .post(path ?? body.request, { headers })
        .then((data) => {
          resolve(data);
        })
        .catch((error) => {
          if (error instanceof UnsuccessfulFetch) {
            error.response
              .json()
              .then((data) => {
                const { reason, message } = data;
                reject(new Error(message ?? reason));
              })
              .catch(reject);
          } else {
            reject(error);
          }
        })
        .catch(reject);
    });
  }
  /** Submit a new order. */
  newOrder({ symbol = this.symbol, ...rest }) {
    const request = "/v1/order/new";
    const body = { request, symbol, ...rest };
    return this.post(request, {}, body);
  }
  /** Submit a new buy order. */
  buy({ symbol = this.symbol, ...rest }) {
    const request = "/v1/order/new";
    const body = { request, symbol, ...rest, side: "buy" };
    return this.post(request, {}, body);
  }
  /** Submit a new sell order. */
  sell({ symbol = this.symbol, ...rest }) {
    const request = "/v1/order/new";
    const body = { request, symbol, ...rest, side: "sell" };
    return this.post(request, {}, body);
  }
  /** Cancel an order. */
  cancelOrder(params) {
    const request = "/v1/order/cancel";
    const body = { request, ...params };
    return this.post(request, {}, body);
  }
  /** Cancel all orders opened by this session. */
  cancelSession(account) {
    const request = "/v1/order/cancel/session";
    const body = { request, ...account };
    return this.post(request, {}, body);
  }
  /** Cancel all outstanding orders created by all sessions owned by this account. */
  cancelAll(account) {
    const request = "/v1/order/cancel/all";
    const body = { request, ...account };
    return this.post(request, {}, body);
  }
  /** Get an order status. */
  getOrderStatus(params) {
    const request = "/v1/order/status";
    const body = { request, ...params };
    return this.post(request, {}, body);
  }
  /** Get all your live orders. */
  getActiveOrders(account) {
    const request = "/v1/orders";
    const body = { request, ...account };
    return this.post(request, {}, body);
  }
  /** Get your past trades. */
  getPastTrades({
    symbol = this.symbol,
    limit_trades = ApiLimit,
    ...rest
  } = {}) {
    const request = "/v1/mytrades";
    const body = { request, symbol, limit_trades, ...rest };
    return this.post(request, {}, body);
  }
  /** Get the volume in price currency that has been traded across all pairs over a period of 30 days. */
  getNotionalVolume(account) {
    const request = "/v1/notionalvolume";
    const body = { request, ...account };
    return this.post(request, {}, body);
  }
  /** Get the trade volume for each symbol. */
  getTradeVolume(account) {
    const request = "/v1/tradevolume";
    const body = { request, ...account };
    return this.post(request, {}, body);
  }
  /** Submit a new clearing order. */
  newClearingOrder({ symbol = this.symbol, ...rest }) {
    const request = "/v1/clearing/new";
    const body = { request, symbol, ...rest };
    return this.post(request, {}, body);
  }
  /** Submit a new broker clearing order. */
  newBrokerOrder({ symbol = this.symbol, ...rest }) {
    const request = "/v1/clearing/broker/new";
    const body = { request, symbol, ...rest };
    return this.post(request, {}, body);
  }
  /** Get a clearing order status. */
  getClearingOrderStatus(order) {
    const request = "/v1/clearing/status";
    const body = { request, ...order };
    return this.post(request, {}, body);
  }
  /** Cancel a clearing order. */
  cancelClearingOrder(order) {
    const request = "/v1/clearing/cancel";
    const body = { request, ...order };
    return this.post(request, {}, body);
  }
  /** Confirm a clearing order. */
  confirmClearingOrder({ symbol = this.symbol, ...rest }) {
    const request = "/v1/clearing/confirm";
    const body = { request, symbol, ...rest };
    return this.post(request, {}, body);
  }
  /** Get the available balances in the supported currencies. */
  getAvailableBalances(account) {
    const request = "/v1/balances";
    const body = { request, ...account };
    return this.post(request, {}, body);
  }
  /** Get the available balances in the supported currencies as well as in notional USD. */
  getNotionalBalances({ currency = DefaultCurrency, ...account } = {}) {
    const request = `/v1/notionalbalances/${currency}`;
    const body = { request, ...account };
    return this.post(request, {}, body);
  }
  /** Get deposits and withdrawals in the supported currencies. */
  getTransfers(rest) {
    const request = "/v1/transfers";
    const body = { request, ...rest };
    return this.post(request, {}, body);
  }
  /** Get deposit addresses. */
  getDepositAddresses({ network, ...rest }) {
    const request = `/v1/addresses/${network}`;
    const body = { request, ...rest };
    return this.post(request, {}, body);
  }
  /** Get a new deposit address. */
  getNewAddress({ currency, ...rest }) {
    const request = `/v1/deposit/${currency}/newAddress`;
    const body = { request, ...rest };
    return this.post(request, {}, body);
  }
  /** Withdraw cryptocurrency funds to a whitelisted address. */
  withdrawCrypto({ currency, ...rest }) {
    const request = `/v1/withdraw/${currency}`;
    const body = { request, ...rest };
    return this.post(request, {}, body);
  }
  /** Make an internal transfer between any two exchange accounts within the Group. */
  internalTransfer({ currency, ...rest }) {
    const request = `/v1/account/transfer/${currency}`;
    const body = { request, ...rest };
    return this.post(request, {}, body);
  }
  /** The add bank API allows for banking information to be sent in via API. However, for the bank to be verified, you must still send in a wire for any amount from the bank account. */
  addBank(bank) {
    const request = `/v1/payments/addbank`;
    const body = { request, ...bank };
    return this.post(request, {}, body);
  }
  /** Get data on balances in the account and linked banks */
  getPaymentMethods(account) {
    const request = `/v1/payments/methods`;
    const body = { request, ...account };
    return this.post(request, {}, body);
  }
  /** The SEN Withdrawals API allows you to withdraw USD from your Gemini account via SEN */
  withdrawSEN(options) {
    const request = `/v1/payments/sen/withdraw`;
    const body = { request, ...options };
    return this.post(request, {}, body);
  }
  /** Get details about the specific account requested such as users, country codes, etc. */
  getAccountDetails(account) {
    const request = "/v1/account";
    const body = { request, ...account };
    return this.post(request, {}, body);
  }
  /** Create a new exchange account within the group. */
  createAccount(account) {
    const request = "/v1/account/create";
    const body = { request, ...account };
    return this.post(request, {}, body);
  }
  /** Get the accounts within the group. */
  getAccounts() {
    const request = "/v1/account/list";
    return this.post(request, {}, { request });
  }
  /** Withdraw `USD` as `GUSD`. */
  withdrawGUSD(options) {
    const request = "/v1/withdraw/usd";
    const body = { request, ...options };
    return this.post(request, {}, body);
  }
  /** Prevent a session from timing out and canceling orders if the require heartbeat flag has been set. */
  heartbeat() {
    const request = "/v1/heartbeat";
    return this.post(request, {}, { request });
  }
  set nonce(nonce) {
    this.#nonce = nonce;
  }
  get nonce() {
    return this.#nonce;
  }
}
