import { FetchClient, UnsuccessfulFetch } from "rpc-request";
export const ApiLimit = 500;
export const DefaultSymbol = "btcusd";
export const DefaultCurrency = "usd";
export const ApiUri = "https://api.gemini.com";
export const SandboxApiUri = "https://api.sandbox.gemini.com";
export const Headers = {
  "User-Agent": "gemini-node-api",
  "Content-Type": "text/plain",
  Accept: "application/json",
  "Content-Length": "0",
  "Cache-Control": "no-cache",
};
export class PublicClient extends FetchClient {
  symbol;
  apiUri;
  constructor({
    symbol = DefaultSymbol,
    sandbox = false,
    apiUri = sandbox ? SandboxApiUri : ApiUri,
  } = {}) {
    super({ headers: { ...Headers } }, { transform: "json", baseUrl: apiUri });
    this.apiUri = apiUri;
    this.symbol = symbol;
  }
  get(path) {
    return new Promise((resolve, reject) => {
      super
        .get(path)
        .then((data) => {
          resolve(data);
        })
        .catch((error) => {
          if (error instanceof UnsuccessfulFetch) {
            error.response
              .json()
              .then((data) => {
                const { reason, message } = data;
                reject(new Error(message ?? reason));
              })
              .catch(reject);
          } else {
            reject(error);
          }
        });
    });
  }
  /** Get all available symbols for trading. */
  getSymbols() {
    return this.get("v1/symbols");
  }
  /** Get extra details about the symbol. */
  getSymbol({ symbol }) {
    return this.get(`v1/symbols/details/${symbol}`);
  }
  getTicker({ symbol = this.symbol, v = "v1" } = {}) {
    if (v === "v2") {
      return this.get(`/${v}/ticker/${symbol}`);
    }
    return this.get(`/${v}/pubticker/${symbol}`);
  }
  /** Get time-intervaled data for the provided symbol. */
  getCandles({ symbol = this.symbol, time_frame = "1day" } = {}) {
    return this.get(`/v2/candles/${symbol}/${time_frame}`);
  }
  /** Get the current order book. */
  getOrderBook({ symbol = this.symbol, ...qs } = {}) {
    const url = new URL(`/v1/book/${symbol}`, this.apiUri);
    PublicClient.#addOptions(url, { ...qs });
    return this.get(url.toString());
  }
  /** Get the trades that have executed since the specified timestamp. */
  getTradeHistory({
    symbol = this.symbol,
    limit_trades = ApiLimit,
    ...qs
  } = {}) {
    const url = new URL(`/v1/trades/${symbol}`, this.apiUri);
    PublicClient.#addOptions(url, { limit_trades, ...qs });
    return this.get(url.toString());
  }
  /** Get current auction information. */
  getCurrentAuction({ symbol = this.symbol } = {}) {
    return this.get(`v1/auction/${symbol}`);
  }
  /** Get the auction events. */
  getAuctionHistory({
    symbol = this.symbol,
    limit_auction_results = ApiLimit,
    ...qs
  } = {}) {
    const url = new URL(`/v1/auction/${symbol}/history`, this.apiUri);
    PublicClient.#addOptions(url, { limit_auction_results, ...qs });
    return this.get(url.toString());
  }
  /** Get the price feed. */
  getPriceFeed() {
    return this.get("v1/pricefeed");
  }
  static #addOptions(target, data) {
    for (const key in data) {
      const value = data[key];
      if (typeof value !== "undefined") {
        target.searchParams.append(key, value.toString());
      }
    }
  }
}
